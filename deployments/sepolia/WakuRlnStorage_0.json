{
  "address": "0xd0AB35EdF257B2790274d84D485b4B91D90D6144",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMessageLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_contractIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DuplicateIdCommitment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FullTree",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "InvalidIdCommitment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "InvalidPaginationQuery",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "messageLimit",
          "type": "uint256"
        }
      ],
      "name": "InvalidUserMessageLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MalformedCommitmentToMessageLimitMap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userMessageLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MemberRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "MemberWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MESSAGE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBERSHIP_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Q",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedBlockNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getCommitments",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userMessageLimit",
          "type": "uint256"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCommitmentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "indexToCommitment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        }
      ],
      "name": "isValidCommitment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "memberExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "commitments",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "limits",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userMessageLimit",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idCommitment",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMessageLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ed598fc636b430ec57a9444371595768d1c03d51a4c5f825caf6a4355cec295",
  "receipt": {
    "to": "0xE784b13B443b4a60557C8D5AF5942b16E434047B",
    "from": "0x3F47b2a1dF96DE2e198d646b598C37251CCC3b98",
    "transactionIndex": null,
    "blockHash": null,
    "blockNumber": null
  },
  "args": [20, 0],
  "numDeployments": 1,
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMessageLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_contractIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateIdCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FullTree\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"InvalidIdCommitment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"InvalidPaginationQuery\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"messageLimit\",\"type\":\"uint256\"}],\"name\":\"InvalidUserMessageLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MalformedCommitmentToMessageLimitMap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userMessageLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MemberWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MESSAGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBERSHIP_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Q\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedBlockNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getCommitments\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userMessageLimit\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCommitmentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToCommitment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"}],\"name\":\"isValidCommitment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"commitments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMessageLimit\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idCommitment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMessageLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MemberRegistered(uint256,uint256,uint256)\":{\"params\":{\"idCommitment\":\"The idCommitment of the member\",\"index\":\"The index of the member in the set\",\"userMessageLimit\":\"the user message limit of the member\"}},\"MemberWithdrawn(uint256,uint256)\":{\"params\":{\"idCommitment\":\"The idCommitment of the member\",\"index\":\"The index of the member in the set\"}}},\"kind\":\"dev\",\"methods\":{\"getDepositAmount(uint256)\":{\"params\":{\"userMessageLimit\":\"The message limit of the member TODO: update this function as per tokenomics design\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(uint256,uint256)\":{\"params\":{\"idCommitment\":\"The idCommitment of the member\",\"userMessageLimit\":\"The message limit of the member\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"slash(uint256,address,uint256[8])\":{\"details\":\"Allows a user to slash a member\",\"params\":{\"idCommitment\":\"The idCommitment of the member\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"DuplicateIdCommitment()\":[{\"notice\":\"Member is already registered\"}],\"FullTree()\":[{\"notice\":\"The tree is full\"}],\"InvalidIdCommitment(uint256)\":[{\"notice\":\"Invalid idCommitment\"}],\"InvalidPaginationQuery(uint256,uint256)\":[{\"notice\":\"Invalid pagination query\"}],\"InvalidUserMessageLimit(uint256)\":[{\"notice\":\"Invalid userMessageLimit\"}]},\"events\":{\"MemberRegistered(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new member is added to the set\"},\"MemberWithdrawn(uint256,uint256)\":{\"notice\":\"Emitted when a member is removed from the set\"}},\"kind\":\"user\",\"methods\":{\"DEPTH()\":{\"notice\":\"The depth of the merkle tree\"},\"MAX_MESSAGE_LIMIT()\":{\"notice\":\"The max message limit per epoch\"},\"MEMBERSHIP_DEPOSIT()\":{\"notice\":\"The deposit amount required to register as a member\"},\"Q()\":{\"notice\":\"The Field\"},\"SET_SIZE()\":{\"notice\":\"The size of the merkle tree, i.e 2^depth\"},\"deployedBlockNumber()\":{\"notice\":\"the deployed block number\"},\"getDepositAmount(uint256)\":{\"notice\":\"Returns the deposit amount required to register as a member\"},\"idCommitmentIndex()\":{\"notice\":\"The index of the next member to be registered\"},\"indexToCommitment(uint256)\":{\"notice\":\"the index to commitment mapping\"},\"memberExists(uint256)\":{\"notice\":\"The membership status of each member\"},\"members(uint256)\":{\"notice\":\"The membership status of each member maps from idCommitment to their index in the set\"},\"register(uint256,uint256)\":{\"notice\":\"Allows a user to register as a member\"},\"stakedAmounts(uint256)\":{\"notice\":\"The amount of eth staked by each member maps from idCommitment to the amount staked\"},\"userMessageLimits(uint256)\":{\"notice\":\"the user message limit of each member maps from idCommitment to their user message limit\"},\"verifier()\":{\"notice\":\"The groth16 verifier contract\"},\"withdraw()\":{\"notice\":\"Allows a user to withdraw funds allocated to them upon slashing a member\"},\"withdrawalBalance(address)\":{\"notice\":\"The balance of each user that can be withdrawn\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WakuRln.sol\":\"WakuRln\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":rln-contract/=lib/rln-contract/src/\"]},\"sources\":{\"contracts/WakuRln.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {RlnBase, DuplicateIdCommitment, FullTree, InvalidIdCommitment} from \\\"rln-contract/RlnBase.sol\\\";\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\nerror NotImplemented();\\nerror MalformedCommitmentToMessageLimitMap();\\n\\nfunction isValidCommitmentToMessageLimitMap(uint256[] calldata commitments, uint256[] calldata limits)\\n    pure\\n    returns (bool)\\n{\\n    uint256 commitmentsLen = commitments.length;\\n    uint256 limitsLen = limits.length;\\n    if (commitmentsLen != limitsLen) return false;\\n    return true;\\n}\\n\\ncontract WakuRln is Ownable, RlnBase {\\n    uint16 public immutable contractIndex;\\n\\n    constructor(uint256 _maxMessageLimit, uint16 _contractIndex)\\n        Ownable()\\n        RlnBase(0, 20, _maxMessageLimit, address(0))\\n    {\\n        contractIndex = _contractIndex;\\n    }\\n\\n    modifier onlyValidCommitmentToMessageLimitMap(uint256[] calldata commitments, uint256[] calldata limits) {\\n        if (!isValidCommitmentToMessageLimitMap(commitments, limits)) {\\n            revert MalformedCommitmentToMessageLimitMap();\\n        }\\n        _;\\n    }\\n\\n    /// Registers a member\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param userMessageLimit The userMessageLimit of the member\\n    function _register(uint256 idCommitment, uint256 userMessageLimit) internal {\\n        _validateRegistration(idCommitment, userMessageLimit);\\n\\n        members[idCommitment] = idCommitmentIndex;\\n        indexToCommitment[idCommitmentIndex] = idCommitment;\\n        memberExists[idCommitment] = true;\\n        userMessageLimits[idCommitment] = userMessageLimit;\\n\\n        emit MemberRegistered(idCommitment, userMessageLimit, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    function register(uint256[] calldata commitments, uint256[] calldata limits)\\n        external\\n        onlyOwner\\n        onlyValidCommitmentToMessageLimitMap(commitments, limits)\\n    {\\n        uint256 len = commitments.length;\\n        for (uint256 i = 0; i < len;) {\\n            _register(commitments[i], limits[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function register(uint256 idCommitment, uint256 userMessageLimit) external payable override {\\n        _register(idCommitment, userMessageLimit);\\n    }\\n\\n    function slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof) external pure override {\\n        revert NotImplemented();\\n    }\\n\\n    function _validateRegistration(uint256 idCommitment, uint256 userMessageLimit)\\n        internal\\n        view\\n        override\\n        onlyValidUserMessageLimit(userMessageLimit)\\n        onlyValidIdCommitment(idCommitment)\\n    {\\n        if (memberExists[idCommitment] == true) revert DuplicateIdCommitment();\\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\\n    }\\n\\n    function _validateSlash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof)\\n        internal\\n        pure\\n        override\\n    {\\n        revert NotImplemented();\\n    }\\n\\n    function withdraw() external pure override {\\n        revert NotImplemented();\\n    }\\n}\\n\",\"keccak256\":\"0x25d1ae31471d20d4c31016dde309d94b62e8df697839dd739fa0349ea8c82681\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/rln-contract/src/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0 OR MIT\\npragma solidity >=0.8.19;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        uint256[2] calldata input\\n    )\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xdff08d48c907dddb248e40d1174aa7a3a169e080cfbd3d04ab3ebae98c165eeb\",\"license\":\"Apache-2.0 OR MIT\"},\"lib/rln-contract/src/RlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport { IVerifier } from \\\"./IVerifier.sol\\\";\\n\\n/// The tree is full\\nerror FullTree();\\n\\n/// Invalid deposit amount\\n/// @param required The required deposit amount\\n/// @param provided The provided deposit amount\\nerror InsufficientDeposit(uint256 required, uint256 provided);\\n\\n/// Member is already registered\\nerror DuplicateIdCommitment();\\n\\n/// Failed validation on registration/slashing\\nerror FailedValidation();\\n\\n/// Invalid idCommitment\\nerror InvalidIdCommitment(uint256 idCommitment);\\n\\n/// Invalid userMessageLimit\\nerror InvalidUserMessageLimit(uint256 messageLimit);\\n\\n/// Invalid receiver address, when the receiver is the contract itself or 0x0\\nerror InvalidReceiverAddress(address to);\\n\\n/// Member is not registered\\nerror MemberNotRegistered(uint256 idCommitment);\\n\\n/// Member has no stake\\nerror MemberHasNoStake(uint256 idCommitment);\\n\\n/// User has insufficient balance to withdraw\\nerror InsufficientWithdrawalBalance();\\n\\n/// Contract has insufficient balance to return\\nerror InsufficientContractBalance();\\n\\n/// Invalid proof\\nerror InvalidProof();\\n\\n/// Invalid pagination query\\nerror InvalidPaginationQuery(uint256 startIndex, uint256 endIndex);\\n\\nabstract contract RlnBase {\\n    /// @notice The Field\\n    uint256 public constant Q =\\n        21_888_242_871_839_275_222_246_405_745_257_275_088_548_364_400_416_034_343_698_204_186_575_808_495_617;\\n\\n    /// @notice The max message limit per epoch\\n    uint256 public immutable MAX_MESSAGE_LIMIT;\\n\\n    /// @notice The deposit amount required to register as a member\\n    uint256 public immutable MEMBERSHIP_DEPOSIT;\\n\\n    /// @notice The depth of the merkle tree\\n    uint256 public immutable DEPTH;\\n\\n    /// @notice The size of the merkle tree, i.e 2^depth\\n    uint256 public immutable SET_SIZE;\\n\\n    /// @notice The index of the next member to be registered\\n    uint256 public idCommitmentIndex = 0;\\n\\n    /// @notice The amount of eth staked by each member\\n    /// maps from idCommitment to the amount staked\\n    mapping(uint256 => uint256) public stakedAmounts;\\n\\n    /// @notice The membership status of each member\\n    /// maps from idCommitment to their index in the set\\n    mapping(uint256 => uint256) public members;\\n\\n    /// @notice the user message limit of each member\\n    /// maps from idCommitment to their user message limit\\n    mapping(uint256 => uint256) public userMessageLimits;\\n\\n    /// @notice the index to commitment mapping\\n    mapping(uint256 => uint256) public indexToCommitment;\\n\\n    /// @notice The membership status of each member\\n    mapping(uint256 => bool) public memberExists;\\n\\n    /// @notice The balance of each user that can be withdrawn\\n    mapping(address => uint256) public withdrawalBalance;\\n\\n    /// @notice The groth16 verifier contract\\n    IVerifier public immutable verifier;\\n\\n    /// @notice the deployed block number\\n    uint32 public immutable deployedBlockNumber;\\n\\n    /// Emitted when a new member is added to the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param userMessageLimit the user message limit of the member\\n    /// @param index The index of the member in the set\\n    event MemberRegistered(uint256 idCommitment, uint256 userMessageLimit, uint256 index);\\n\\n    /// Emitted when a member is removed from the set\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param index The index of the member in the set\\n    event MemberWithdrawn(uint256 idCommitment, uint256 index);\\n\\n    modifier onlyValidIdCommitment(uint256 idCommitment) {\\n        if (!isValidCommitment(idCommitment)) revert InvalidIdCommitment(idCommitment);\\n        _;\\n    }\\n\\n    modifier onlyValidUserMessageLimit(uint256 messageLimit) {\\n        if (messageLimit > MAX_MESSAGE_LIMIT) revert InvalidUserMessageLimit(messageLimit);\\n        if (messageLimit == 0) revert InvalidUserMessageLimit(messageLimit);\\n        _;\\n    }\\n\\n    constructor(uint256 membershipDeposit, uint256 depth, uint256 maxMessageLimit, address _verifier) {\\n        MEMBERSHIP_DEPOSIT = membershipDeposit;\\n        MAX_MESSAGE_LIMIT = maxMessageLimit;\\n        DEPTH = depth;\\n        SET_SIZE = 1 << depth;\\n        verifier = IVerifier(_verifier);\\n        deployedBlockNumber = uint32(block.number);\\n    }\\n\\n    /// Returns the deposit amount required to register as a member\\n    /// @param userMessageLimit The message limit of the member\\n    /// TODO: update this function as per tokenomics design\\n    function getDepositAmount(uint256 userMessageLimit) public view returns (uint256) {\\n        return userMessageLimit * MEMBERSHIP_DEPOSIT;\\n    }\\n\\n    /// Allows a user to register as a member\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param userMessageLimit The message limit of the member\\n    function register(\\n        uint256 idCommitment,\\n        uint256 userMessageLimit\\n    )\\n        external\\n        payable\\n        virtual\\n        onlyValidIdCommitment(idCommitment)\\n        onlyValidUserMessageLimit(userMessageLimit)\\n    {\\n        uint256 requiredDeposit = getDepositAmount(userMessageLimit);\\n        if (msg.value != requiredDeposit) {\\n            revert InsufficientDeposit(MEMBERSHIP_DEPOSIT, msg.value);\\n        }\\n        _validateRegistration(idCommitment, userMessageLimit);\\n        _register(idCommitment, userMessageLimit, msg.value);\\n    }\\n\\n    /// Registers a member\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param userMessageLimit The message limit of the member\\n    /// @param stake The amount of eth staked by the member\\n    function _register(uint256 idCommitment, uint256 userMessageLimit, uint256 stake) internal virtual {\\n        if (memberExists[idCommitment]) revert DuplicateIdCommitment();\\n        if (idCommitmentIndex >= SET_SIZE) revert FullTree();\\n\\n        members[idCommitment] = idCommitmentIndex;\\n        indexToCommitment[idCommitmentIndex] = idCommitment;\\n        memberExists[idCommitment] = true;\\n        stakedAmounts[idCommitment] = stake;\\n        userMessageLimits[idCommitment] = userMessageLimit;\\n\\n        emit MemberRegistered(idCommitment, userMessageLimit, idCommitmentIndex);\\n        idCommitmentIndex += 1;\\n    }\\n\\n    /// @dev Inheriting contracts MUST override this function\\n    function _validateRegistration(uint256 idCommitment, uint256 userMessageLimit) internal view virtual;\\n\\n    /// @dev Allows a user to slash a member\\n    /// @param idCommitment The idCommitment of the member\\n    function slash(\\n        uint256 idCommitment,\\n        address payable receiver,\\n        uint256[8] calldata proof\\n    )\\n        external\\n        virtual\\n        onlyValidIdCommitment(idCommitment)\\n    {\\n        _validateSlash(idCommitment, receiver, proof);\\n        _slash(idCommitment, receiver, proof);\\n    }\\n\\n    /// @dev Slashes a member by removing them from the set, and adding their\\n    /// stake to the receiver's available withdrawal balance\\n    /// @param idCommitment The idCommitment of the member\\n    /// @param receiver The address to receive the funds\\n    function _slash(uint256 idCommitment, address payable receiver, uint256[8] calldata proof) internal virtual {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert InvalidReceiverAddress(receiver);\\n        }\\n\\n        uint256 userMessageLimit = userMessageLimits[idCommitment];\\n        if (memberExists[idCommitment] == false) revert MemberNotRegistered(idCommitment);\\n        // check if member is registered\\n        if (stakedAmounts[idCommitment] == 0) {\\n            revert MemberHasNoStake(idCommitment);\\n        }\\n\\n        if (!_verifyProof(idCommitment, receiver, proof)) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 amountToTransfer = stakedAmounts[idCommitment];\\n\\n        // delete member\\n        uint256 index = members[idCommitment];\\n        members[idCommitment] = 0;\\n        indexToCommitment[index] = 0;\\n        memberExists[idCommitment] = false;\\n        stakedAmounts[idCommitment] = 0;\\n        userMessageLimits[idCommitment] = 0;\\n\\n        // refund deposit\\n        withdrawalBalance[receiver] += amountToTransfer;\\n\\n        emit MemberWithdrawn(idCommitment, index);\\n    }\\n\\n    function _validateSlash(\\n        uint256 idCommitment,\\n        address payable receiver,\\n        uint256[8] calldata proof\\n    )\\n        internal\\n        view\\n        virtual;\\n\\n    /// Allows a user to withdraw funds allocated to them upon slashing a member\\n    function withdraw() external virtual {\\n        uint256 amount = withdrawalBalance[msg.sender];\\n\\n        if (amount == 0) revert InsufficientWithdrawalBalance();\\n        if (amount > address(this).balance) {\\n            revert InsufficientContractBalance();\\n        }\\n\\n        withdrawalBalance[msg.sender] = 0;\\n\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function isValidCommitment(uint256 idCommitment) public pure returns (bool) {\\n        return idCommitment != 0 && idCommitment < Q;\\n    }\\n\\n    /// @dev Groth16 proof verification\\n    function _verifyProof(\\n        uint256 idCommitment,\\n        address receiver,\\n        uint256[8] calldata proof\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return verifier.verifyProof(\\n            [proof[0], proof[1]],\\n            [[proof[2], proof[3]], [proof[4], proof[5]]],\\n            [proof[6], proof[7]],\\n            [idCommitment, uint256(uint160(receiver))]\\n        );\\n    }\\n\\n    function getCommitments(uint256 startIndex, uint256 endIndex) public view returns (uint256[] memory) {\\n        if (startIndex >= endIndex) revert InvalidPaginationQuery(startIndex, endIndex);\\n        if (endIndex > idCommitmentIndex) revert InvalidPaginationQuery(startIndex, endIndex);\\n\\n        uint256[] memory commitments = new uint256[](endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            commitments[i - startIndex] = indexToCommitment[i];\\n        }\\n        return commitments;\\n    }\\n}\\n\",\"keccak256\":\"0x4203a69fbfbdb33e2b28efb810aa7d028f376f6e86cc2d18b77095d316f76eec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260006001553480156200001757600080fd5b5060405162001ab038038062001ab083398181016040528101906200003d91906200023a565b600060148360006200006462000058620000ef60201b60201c565b620000f760201b60201c565b8360a0818152505081608081815250508260c08181525050826001901b60e081815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250504363ffffffff166101208163ffffffff1681525050505050508061ffff166101408161ffff1681525050505062000281565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001d581620001c0565b8114620001e157600080fd5b50565b600081519050620001f581620001ca565b92915050565b600061ffff82169050919050565b6200021481620001fb565b81146200022057600080fd5b50565b600081519050620002348162000209565b92915050565b60008060408385031215620002545762000253620001bb565b5b60006200026485828601620001e4565b9250506020620002778582860162000223565b9150509250929050565b60805160a05160c05160e0516101005161012051610140516117bf620002f16000396000610661015260006107c401526000610685015260008181610a6c0152610f1401526000610a1201526000818161075f0152610ac20152600081816106050152610dc201526117bf6000f3fe6080604052600436106101665760003560e01c80638be9b119116100d1578063bc4991281161008a578063d66d6c1011610064578063d66d6c1014610568578063e493ef8c14610584578063f220b9ec146105af578063f2fde38b146105da57610166565b8063bc499128146104c3578063c5b208ff14610500578063d0383d681461053d57610166565b80638be9b1191461039f5780638da5cb5b146103c85780639056a9bf146103f3578063933ebfdd1461043057806398366e351461046d578063ae74552a1461049857610166565b80633ccfd60b116101235780633ccfd60b1461028f5780634add651e146102a65780635daf08ca146102d15780636bdcc8ab1461030e578063715018a61461034b5780637671ac051461036257610166565b806309aeb04c1461016b57806322d9730c1461019657806328b070e0146101d35780632b7ac3f3146101fe5780632de999bf14610229578063378de45b14610252575b600080fd5b34801561017757600080fd5b50610180610603565b60405161018d9190610f8c565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190610fdd565b610627565b6040516101ca9190611025565b60405180910390f35b3480156101df57600080fd5b506101e861065f565b6040516101f5919061105d565b60405180910390f35b34801561020a57600080fd5b50610213610683565b60405161022091906110f7565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b9190611177565b6106a7565b005b34801561025e57600080fd5b5061027960048036038101906102749190610fdd565b61075b565b6040516102869190610f8c565b60405180910390f35b34801561029b57600080fd5b506102a4610790565b005b3480156102b257600080fd5b506102bb6107c2565b6040516102c89190611217565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f39190610fdd565b6107e6565b6040516103059190610f8c565b60405180910390f35b34801561031a57600080fd5b5061033560048036038101906103309190610fdd565b6107fe565b6040516103429190611025565b60405180910390f35b34801561035757600080fd5b5061036061081e565b005b34801561036e57600080fd5b5061038960048036038101906103849190610fdd565b610832565b6040516103969190610f8c565b60405180910390f35b3480156103ab57600080fd5b506103c660048036038101906103c19190611292565b61084a565b005b3480156103d457600080fd5b506103dd61087c565b6040516103ea9190611307565b60405180910390f35b3480156103ff57600080fd5b5061041a60048036038101906104159190610fdd565b6108a5565b6040516104279190610f8c565b60405180910390f35b34801561043c57600080fd5b5061045760048036038101906104529190611322565b6108bd565b6040516104649190611420565b60405180910390f35b34801561047957600080fd5b50610482610a10565b60405161048f9190610f8c565b60405180910390f35b3480156104a457600080fd5b506104ad610a34565b6040516104ba9190610f8c565b60405180910390f35b3480156104cf57600080fd5b506104ea60048036038101906104e59190610fdd565b610a3a565b6040516104f79190610f8c565b60405180910390f35b34801561050c57600080fd5b506105276004803603810190610522919061146e565b610a52565b6040516105349190610f8c565b60405180910390f35b34801561054957600080fd5b50610552610a6a565b60405161055f9190610f8c565b60405180910390f35b610582600480360381019061057d9190611322565b610a8e565b005b34801561059057600080fd5b50610599610a9c565b6040516105a69190610f8c565b60405180910390f35b3480156105bb57600080fd5b506105c4610ac0565b6040516105d19190610f8c565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc919061146e565b610ae4565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b600080821415801561065857507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182105b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106af610b67565b838383836106bf84848484610be5565b6106f5576040517fb750624800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600088889050905060005b8181101561074f576107448a8a8381811061071e5761071d61149b565b5b905060200201358989848181106107385761073761149b565b5b90506020020135610c17565b806001019050610700565b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000008261078991906114f9565b9050919050565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020528060005260406000206000915090505481565b60066020528060005260406000206000915054906101000a900460ff1681565b610826610b67565b6108306000610cf3565b565b60056020528060005260406000206000915090505481565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60046020528060005260406000206000915090505481565b60608183106109055782826040517f9ffcd53d0000000000000000000000000000000000000000000000000000000081526004016108fc92919061153b565b60405180910390fd5b60015482111561094e5782826040517f9ffcd53d00000000000000000000000000000000000000000000000000000000815260040161094592919061153b565b60405180910390fd5b6000838361095c9190611564565b67ffffffffffffffff81111561097557610974611598565b5b6040519080825280602002602001820160405280156109a35781602001602082028036833780820191505090505b50905060008490505b83811015610a055760056000828152602001908152602001600020548286836109d59190611564565b815181106109e6576109e561149b565b5b60200260200101818152505080806109fd906115c7565b9150506109ac565b508091505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60026020528060005260406000206000915090505481565b60076020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a988282610c17565b5050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b7f000000000000000000000000000000000000000000000000000000000000000081565b610aec610b67565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5290611692565b60405180910390fd5b610b6481610cf3565b50565b610b6f610db7565b73ffffffffffffffffffffffffffffffffffffffff16610b8d61087c565b73ffffffffffffffffffffffffffffffffffffffff1614610be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bda906116fe565b60405180910390fd5b565b6000808585905090506000848490509050808214610c0857600092505050610c0f565b6001925050505b949350505050565b610c218282610dbf565b6001546003600084815260200190815260200160002081905550816005600060015481526020019081526020016000208190555060016006600084815260200190815260200160002060006101000a81548160ff0219169083151502179055508060046000848152602001908152602001600020819055507fff42916a89d1f5125f7f47168ee59c2b3fc9246ad1b229082ee85b69d001b5d78282600154604051610cce9392919061171e565b60405180910390a16001806000828254610ce89190611755565b925050819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b807f0000000000000000000000000000000000000000000000000000000000000000811115610e2557806040517f13a5e2ee000000000000000000000000000000000000000000000000000000008152600401610e1c9190610f8c565b60405180910390fd5b60008103610e6a57806040517f13a5e2ee000000000000000000000000000000000000000000000000000000008152600401610e619190610f8c565b60405180910390fd5b82610e7481610627565b610eb557806040517f7f3e75af000000000000000000000000000000000000000000000000000000008152600401610eac9190610f8c565b60405180910390fd5b600115156006600086815260200190815260200160002060009054906101000a900460ff16151503610f12576040517e0a60f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060015410610f6d576040517f57f6953100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000819050919050565b610f8681610f73565b82525050565b6000602082019050610fa16000830184610f7d565b92915050565b600080fd5b600080fd5b610fba81610f73565b8114610fc557600080fd5b50565b600081359050610fd781610fb1565b92915050565b600060208284031215610ff357610ff2610fa7565b5b600061100184828501610fc8565b91505092915050565b60008115159050919050565b61101f8161100a565b82525050565b600060208201905061103a6000830184611016565b92915050565b600061ffff82169050919050565b61105781611040565b82525050565b6000602082019050611072600083018461104e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006110bd6110b86110b384611078565b611098565b611078565b9050919050565b60006110cf826110a2565b9050919050565b60006110e1826110c4565b9050919050565b6110f1816110d6565b82525050565b600060208201905061110c60008301846110e8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261113757611136611112565b5b8235905067ffffffffffffffff81111561115457611153611117565b5b6020830191508360208202830111156111705761116f61111c565b5b9250929050565b6000806000806040858703121561119157611190610fa7565b5b600085013567ffffffffffffffff8111156111af576111ae610fac565b5b6111bb87828801611121565b9450945050602085013567ffffffffffffffff8111156111de576111dd610fac565b5b6111ea87828801611121565b925092505092959194509250565b600063ffffffff82169050919050565b611211816111f8565b82525050565b600060208201905061122c6000830184611208565b92915050565b600061123d82611078565b9050919050565b61124d81611232565b811461125857600080fd5b50565b60008135905061126a81611244565b92915050565b60008190508260206008028201111561128c5761128b61111c565b5b92915050565b600080600061014084860312156112ac576112ab610fa7565b5b60006112ba86828701610fc8565b93505060206112cb8682870161125b565b92505060406112dc86828701611270565b9150509250925092565b60006112f182611078565b9050919050565b611301816112e6565b82525050565b600060208201905061131c60008301846112f8565b92915050565b6000806040838503121561133957611338610fa7565b5b600061134785828601610fc8565b925050602061135885828601610fc8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61139781610f73565b82525050565b60006113a9838361138e565b60208301905092915050565b6000602082019050919050565b60006113cd82611362565b6113d7818561136d565b93506113e28361137e565b8060005b838110156114135781516113fa888261139d565b9750611405836113b5565b9250506001810190506113e6565b5085935050505092915050565b6000602082019050818103600083015261143a81846113c2565b905092915050565b61144b816112e6565b811461145657600080fd5b50565b60008135905061146881611442565b92915050565b60006020828403121561148457611483610fa7565b5b600061149284828501611459565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061150482610f73565b915061150f83610f73565b925082820261151d81610f73565b91508282048414831517611534576115336114ca565b5b5092915050565b60006040820190506115506000830185610f7d565b61155d6020830184610f7d565b9392505050565b600061156f82610f73565b915061157a83610f73565b9250828203905081811115611592576115916114ca565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006115d282610f73565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611604576116036114ca565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061167c60268361160f565b915061168782611620565b604082019050919050565b600060208201905081810360008301526116ab8161166f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116e860208361160f565b91506116f3826116b2565b602082019050919050565b60006020820190508181036000830152611717816116db565b9050919050565b60006060820190506117336000830186610f7d565b6117406020830185610f7d565b61174d6040830184610f7d565b949350505050565b600061176082610f73565b915061176b83610f73565b9250828201905080821115611783576117826114ca565b5b9291505056fea2646970667358221220f6c3084e40c3d832e80d8784a217128c00d11febcddb3c95a294a3dda6d98fcc64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "MemberRegistered(uint256,uint256,uint256)": {
        "params": {
          "idCommitment": "The idCommitment of the member",
          "index": "The index of the member in the set",
          "userMessageLimit": "the user message limit of the member"
        }
      },
      "MemberWithdrawn(uint256,uint256)": {
        "params": {
          "idCommitment": "The idCommitment of the member",
          "index": "The index of the member in the set"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getDepositAmount(uint256)": {
        "params": {
          "userMessageLimit": "The message limit of the member TODO: update this function as per tokenomics design"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(uint256,uint256)": {
        "params": {
          "idCommitment": "The idCommitment of the member",
          "userMessageLimit": "The message limit of the member"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "slash(uint256,address,uint256[8])": {
        "details": "Allows a user to slash a member",
        "params": {
          "idCommitment": "The idCommitment of the member"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  }
}
